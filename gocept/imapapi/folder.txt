============
IMAP folders
============

Accessing IMAP folders
======================

IMAP accounts provide access to the folder structure by exposing a list of
top-level folders:

>>> from gocept.imapapi.account import Account
>>> from pprint import pprint
>>> account = Account('localhost', 10143, 'test', 'bsdf')
>>> pprint(dict(account.folders))
{u'Bar': <gocept.imapapi.folder.Folder object u'Bar' at 0x2612732>,
 u'F\xf6': <gocept.imapapi.folder.Folder object u'F\xf6' at 0x2612732>,
 u'INBOX': <gocept.imapapi.folder.Folder object u'INBOX' at 0x2134232>}

A folder knows about its name, path, separator, and depth in the hierarchy:

>>> INBOX = account.folders[u'INBOX']
>>> INBOX.name
u'INBOX'
>>> INBOX.path
u'INBOX'
>>> INBOX.separator
'/'
>>> INBOX.depth
1

Folders also provide access to their direct sub-folders:

>>> INBOX.folders
{u'Baz': <gocept.imapapi.folder.Folder object u'INBOX/Baz' at 0x2318293>}

Here's a folder that's a bit deeper in the hierarchy:

>>> baz = INBOX.folders[u'Baz']
>>> baz.name
u'Baz'
>>> baz.path
u'INBOX/Baz'
>>> baz.separator
'/'
>>> baz.depth
2

Creating folders
================

Folders may be created as top-level folders of an account or within existing
folders. Let's create three nested folders starting at the top level:

>>> from gocept.imapapi.folder import Folder
>>> account.folders[u'Top level'] = Folder()
>>> pprint(dict(account.folders))
{u'Bar': <gocept.imapapi.folder.Folder object u'Bar' at 0x2142346>,
 u'F\xf6': <gocept.imapapi.folder.Folder object u'F\xf6' at 0x2612732>,
 u'INBOX': <gocept.imapapi.folder.Folder object u'INBOX' at 0x2762352>,
 u'Top level': <gocept.imapapi.folder.Folder object u'Top level' at 0x2123423>}
>>> top_level = account.folders[u'Top level']
>>> top_level.name
u'Top level'
>>> top_level.path
u'Top level'

>>> top_level.folders[u'Subfolder'] = subfolder = Folder()
>>> top_level.folders
{u'Subfolder': <gocept.imapapi.folder.Folder object
                u'Top level/Subfolder' at 0x2132423>}
>>> subfolder.name
u'Subfolder'
>>> subfolder.path
u'Top level/Subfolder'

>>> subfolder.folders[u'Subsubfolder'] = subsubfolder = Folder()
>>> subfolder.folders
{u'Subsubfolder': <gocept.imapapi.folder.Folder object
                   u'Top level/Subfolder/Subsubfolder' at 0x2132423>}
>>> subsubfolder.name
u'Subsubfolder'
>>> subsubfolder.path
u'Top level/Subfolder/Subsubfolder'


Accessing messages
==================

Messages can be retrieved from a folder using its `messages` attribute:

>>> pprint(dict(INBOX.messages))
{'...-...': <gocept.imapapi.message.Message object u'INBOX/...-...' at 0x2162537>,
 '...-...': <gocept.imapapi.message.Message object u'INBOX/...-...' at 0x2138986>}

Individual messages have a name attribute which can be used to uniquely
identify a message within a folder. We can use it to retrieve an individual
message:

>>> mail1 = INBOX.messages.values()[0]
>>> mail1.headers['X-IMAPAPI-Test']
u'1'
>>> INBOX.messages[mail1.name].headers['X-IMAPAPI-Test']
u'1'


Appending messages to folders
=============================

To store a new message in a folder, you `append` it:

>>> before = len(INBOX.messages)
>>> INBOX.messages.add('Foo')
>>> len(INBOX.messages) - before
1
>>> message = INBOX.messages.values()[-1]
>>> message.raw
'Foo'


Deleting messages from folders
==============================

To delete a message from a folder, you delete it using the `del` operator:

>>> before = len(INBOX.messages)
>>> del INBOX.messages[INBOX.messages.keys()[-1]]
>>> len(INBOX.messages) - before
-1
>>> message = INBOX.messages.values()[-1]
>>> print message.raw[:10000]
Return-Path: <cz@gocept.com>
...
From: Christian Zagrodnick <cz@gocept.com>
To: Christian Theune <ct@gocept.com>
Message-Id: <62A3B8BC-8662-45A8-A342-B2745526C066@gocept.com>
Content-Type: multipart/alternative; boundary=Apple-Mail-277--154605444
Subject: 11 - AppleMail, Complex HTML with many images
...
