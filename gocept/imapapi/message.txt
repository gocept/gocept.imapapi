=============
IMAP messages
=============

IMAP messages provide a convenient way to access information from a mail
message. They are roughly based on the structures that Python's email module
provides but are optimized to avoid loading too much data at once and to
provide very convenient access.

Messages are retrieved from folders which are IMessageContainers:

>>> from gocept.imapapi.account import Account
>>> account = Account('localhost', 10143, 'test', 'bsdf')
>>> INBOX = account.folders['INBOX']
>>> INBOX.name
'INBOX'
>>> from gocept.imapapi.interfaces import IMessageContainer
>>> IMessageContainer.providedBy(INBOX)
True

Note that the account itself is not a message container. It only contains
folders, not messages:

>>> IMessageContainer.providedBy(account)
False

Let's get a message now:

>>> message = INBOX.messages.values()[0]
>>> message
<gocept.imapapi.message.Message object 'INBOX/...' at 0x2312872>


Headers
=======

Headers can be accessed using the dictionary API on the message. Headers are
decoded into unicode automatically:

>>> message.headers['X-IMAPAPI-Test']
u'1'
>>> message.headers['X-Correct-Encoding-Header']
u'Text \xfc'

Invalid encodings will end in unicode strings anyway but with replaced
characters as a hint:

>>> message.headers['X-Unknown-Encoding-Header']
u'Text \ufffd\ufffd'
>>> message.headers['X-Wrong-Encoding-Header']
u'Text \ufffd\ufffd'
>>> message.headers['X-No-Encoding-Header']
u'Text \ufffd or not'

Other popular headers like From, Date and Subject can be accessed by using the
dictionary API, too. They are also decoded into unicode automatically:

>>> message.headers['From']
u'test@localhost'
>>> message.headers['Date']
u'02-Jul-2008 03:05:00 +0200'
>>> message.headers['Subject']
u'Mail 1'


Raw
===

The message itself can be accessed in the raw form including all headers,
parts etc. This does not perform any mangling, decoding or other function that
would change the representation from what is stored on the server:

>>> message.raw
'From: test@localhost\r\nX-IMAPAPI-Test: 1\r\nX-No-Encoding-Header: Text \xfc or not\r\nX-Wrong-Encoding-Header: =?ascii?q?Text_=C3=BC?=\r\nX-Unknown-Encoding-Header: =?foobarschnappeldiwutz?q?Text_=C3=BC?=\r\nX-Correct-Encoding-Header: =?utf-8?q?Text_=C3=BC?=\r\nDate: 02-Jul-2008 03:05:00 +0200\r\nSubject: Mail 1\r\n\r\nEverything is ok!'


Message body
============

Plain text
----------

The message body itself can also be retrieved in a plain text version (which
might include encoded mime parts):

>>> print message.text
Everything is ok!

Multipart/alternative
---------------------

Messages with the type ``multipart-alternative`` contain of several parts,
which contain the same content in differnt types (e.g. plain text and html).
The mailer has to choose the proper part and display it.

>>> message = INBOX.messages.values()[1]
>>> message.body
<gocept.imapapi.message.BodyPart object at 0x2428811>

This testmessage contains of two parts. One contains plain text, the other one
html quoted text:

>>> from pprint import pprint
>>> parts = message.body.parts
>>> pprint(parts)
[<gocept.imapapi.message.BodyPart object at 0x2428819>,
 <gocept.imapapi.message.BodyPart object at 0x2428212>]
>>> print parts[0]['content_type']
text/plain
>>> print parts[1]['content_type']
text/html

The parts content can be retrieved with the ``fetch`` method:

>>> print parts[0].fetch()
Everything is ok!

>>> print parts[1].fetch()
<html>
  <head>
    <title>Mail 2</title>
  </head>
  <body>
    Everything is ok!
  </body>
</html>
